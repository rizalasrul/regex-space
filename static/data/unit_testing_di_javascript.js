export default [
  {
    slug: 'pengenalan',
    label: 'Pengenalan',
    image_thumbnail: '01.webp',
    isUnlock: true,
    isActive: true,
    content: '<h1>Apa itu unit testing?<\/h1>\r\n          <p>\r\n            Sebelum kita masuk ke sana, kita perlu memahami apa yang dimaksud dengan kata \u201Ctesting\u201D di sini.\r\n          <\/p>\r\n          <blockquote>\r\n            <p>\r\n              Testing is the process of evaluating a system or its component(s) with the intent to find whether it satisfies the specified requirements or not.\r\n            <\/p>\r\n          <\/blockquote>\r\n          <blockquote>\r\n            <p>\r\n              Testing is executing a system in order to identify any gaps, errors, or missing requirements in contrary to the actual requirements.\r\n            <\/p>\r\n          <\/blockquote>\r\n          <p>\r\n            Kedua pengertian tersebut dapat ditemui di situs <a href=\"https:\/\/www.tutorialspoint.com\/software_testing\/index.htm\" target=\"_target\" rel=\"noopener\">tutorialspoint<\/a>. Ringkasnya, testing adalah sebuah proses untuk mengevaluasi apakah:\r\n          <\/p>\r\n          <ol>\r\n            <li>Sistem sesuai dengan persyaratan yang sudah ditentukan.<\/li>\r\n            <li>Sistem terbebas dari bug atau error.<\/li>\r\n          <\/ol>\r\n          <p>\r\n            Biasanya di perusahaan teknologi, mereka memiliki satu role sendiri yang melakukan testing. Beberapa menyebutnya dengan QA (quality assurance), atau juga bernama TE (test engineer). Cuman untuk unit test ini ruang lingkup yang bertanggung jawab adalah developer, baik itu backend engineer, frontend engineer, ataupun mobile apps developer.\r\n          <\/p>\r\n          <h1>Mengapa perlu unit testing?<\/h1>\r\n          <p>\r\n            Meskipun di perusahaan tempat kita bekerja sudah memiliki divisi QA atau TE, kita sebagai developer juga bertanggung jawab penuh atas kode yang kita hasilkan. Kita wajib memastikan bahwa kode yang kita tulis itu <em>bug-free<\/em> sebelum akhirnya deploy ke production dan digunakan oleh user. Karena pada akhirnya yang tahu seluk beluk fitur yang dipakai user adalah kita yang menghasilkan kode. Sehingga QA atau TE kita cukup melakukan testing di <em>edge case<\/em> tertentu yang tidak dapat dipikirkan oleh user atau mungkin kita.\r\n          <\/p>\r\n          <p>\r\n            Di sinilah unit test berperan. Manfaat lain dari unit test adalah kita menjadi lebih percaya diri terhadap kode yang kita hasilkan. Sehingga kemungkinan munculnya bug akan sedikit, atau bahkan tidak ada.\r\n          <\/p>\r\n          <h1>Layer dalam software testing<\/h1>\r\n          <p>\r\n            Gambar piala di bawah ini menjelaskan tentang empat layer dari metode software testing yang ada di aplikasi web, yang mana konteksnya adalah javascript.\r\n          <\/p>\r\n        <figure>\r\n          <img\r\n            src=\"\/images\/yuk_belajar\/unit_testing_di_js\/01-1.webp\"\r\n            alt=\"Empat layer dari software testing di javascript\" \/>\r\n          <figcaption>\r\n            Empat layer dari software testing di javascript\r\n          <\/figcaption>\r\n        <\/figure>\r\n        <p>\r\n          Keempat layer tersebut:\r\n        <\/p>\r\n        <ul>\r\n          <li>\r\n            <b>Static test<\/b> adalah teknik pengujian yang paling dasar. Biasanya bug yang didapat dari metode pengujian ini adalah kesalahan kalimat (<em>typo<\/em>), gambar, warna tombol, dan kesalahan sintaks.\r\n          <\/li>\r\n          <li>\r\n            <b>Unit test<\/b> adalah teknik pengujian yang menyasar logika-logika terkecil dari suatu halaman. Contohnya pengujian untuk logika perhitungan matematika dari sebuah total pembelanjaan.\r\n          <\/li>\r\n          <li>\r\n            <b>Integration test<\/b> adalah teknik pengujian yang menggabungkan beberapa unit logika menjadi satu alur yang saling berkaitan. Jika konteksnya masih seperti logika perhitungan dari total pembelanjaan, maka integration test akan melakukan pengujian untuk alur total pembelanjaan bersamaan dengan validasi pembeli (jika di sistem kita ada logika untuk melakukan validasi terhadap user tertentu yang dapat melakukan pembelian).\r\n          <\/li>\r\n          <li>\r\n            <b>E2E (End-to-end) test<\/b> adalah teknik pengujian otomatis yang seolah-olah ada robot yang sedang melakukan interaksi ke halaman website kita. Robot tersebut akan memasukkan nama, menambah keranjang belanja, hingga melakukan pembayaran seolah-olah robot tersebut adalah <em>real user<\/em> yang sedang belanja.\r\n          <\/li>\r\n        <\/ul>\r\n        <p>\r\n          Dari keempat layer tersebut, pada umumnya peran developer hanya di layer pertama hingga ketiga. Layer keempat biasanya menjadi tanggung jawab QA atau TE. Cuman, tidak ada salahnya jika kita sebagai developer juga sanggup untuk melakukan e2e testing juga.\r\n        <\/p>\r\n        <p>\r\n          Pada tulisan ini kita hanya fokus di unit testing di javascript. Semoga di kesempatan selanjutnya kita dapat membahas layer-layer testing lainnya ya.\r\n        <\/p>\r\n        <h1>Lalu, bagaimana cara membuat unit test?<\/h1>\r\n        <p>\r\n          Kita akan menggunakan kode, untuk menguji kode kita.\r\n        <\/p>\r\n        <p>\r\n          Maksudnya adalah kita akan membuat kode terpisah yang tujuannya adalah untuk menguji fungsi dan logika dari kode fitur yang kita buat.\r\n        <\/p>\r\n        <p>\r\n          Kita akan menyederhanakan kode fitur yang kita buat sehingga menjadi unit-unit logika terkecil yang nantinya unit-unit tersebut dapat kita uji melalui kode unit test. Itulah mengapa kita sering mendengar istilah <em>testable code<\/em>, yaitu kode yang dengan unit logika paling sederhana, saking sederhananya kita dapat membuat unit test untuk kode tersebut dengan mudah.\r\n        <\/p>\r\n        <h1>Tahap selanjutnya<\/h1>\r\n        <p>\r\n          Setelah mengenal unit testing dan macam-macam testing lain, kita akan sedikit belajar bagaimana cara kerja unit test. Kita akan menulis kode unit test menggunakan native javascript terlebih dahulu tanpa bantuan <em>test runner<\/em> apapun.\r\n        <\/p>',
  },
  {
    slug: 'menulis-test-untuk-pertama-kali',
    label: 'Menulis Test untuk Pertama Kali',
    image_thumbnail: '02.webp',
    isUnlock: true,
    isActive: false,
    content: `<h1>Simulasi menulis unit test<\/h1> <p>\r\n            Agar lebih mudah memahami, mari kita lihat kode javascript yang ada di bawah.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span><\/span><\/span> prev + curr.price, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span><\/span><\/span> },\r\n  ],\r\n};\r\n<\/code><\/pre> <p>\r\n            Pada kode di atas, terdapat fungsi <code>orderTotal<\/code> yang bertugas untuk menghitung total harga dari pesanan. Pada konteks di atas, pesanan direpresentasikan ke dalam objek <code>someOrder<\/code> yang memiliki properti <code>items<\/code> dengan array yang berisi nama barang beserta harganya.\r\n          <\/p> <p>\r\n            Untuk menyegarkan kembali ingatan kita mengenai fungsi <code>reduce<\/code>, bisa merujuk di tautan <a href=\"https:\/\/developer.mozilla.org\/en-US\/docs\/Web\/JavaScript\/Reference\/Global_Objects\/Array\/reduce\" target=\"_blank\" rel=\"noopener\">ini<\/a>.\r\n          <\/p> <p>\r\n            Sekarang mari kita coba untuk membuat kode unit test untuk menguji fungsionalitas dari <code>orderTotal<\/code>. Untuk sekarang kita tidak akan menggunakan test runner apapun. Kita akan menulis kode menggunakan native javascript supaya kita dapat lebih mudah menangkap esensi dari unit test itu sendiri. Kita akan mulai menggunakan test runner pada tahap berikutnya.\r\n          <\/p> <p>\r\n            Jadi sebelum kita menulis unit test, kita perlu memahami hasil dari logika yang akan kita uji, dalam hal ini berarti hasil dari fungsi <code>orderTotal<\/code>. Kita akan menggunakan objek <code>someOrder<\/code> sebagai acuan kita dalam menguji fungsi <code>orderTotal<\/code>. Jika kita hitung manual, maka harga pesanan berdasarkan <code>someOrder<\/code> adalah 808 (800 + 8).\r\n          <\/p> <p>\r\n            Maka kode unit test tersebut akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Yup, secara konsep memang sesederhana itu. Kita membuat kode lain yang bertugas untuk menguji dari kode fungsi kita, dalam hal ini adalah hasil dari fungsi <code>orderTotal<\/code>.\r\n          <\/p> <p>\r\n            Tetapi sebaris kode unit test itu belum cukup untuk menguji fungsi <code>orderTotal<\/code> secara komprehensif. Bisa saja kita mengakali fungsi <code>orderTotal<\/code> dengan langsung mengembalikan nilai 808, seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span><\/span><\/span>;\r\n<\/code><\/pre> <p>\r\n            Maka dari itu kita perlu membuat unit test lagi dengan kondisi yang berbeda. Kita dapat membuat objek <code>anotherSomeOrder<\/code> dengan nilai seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> anotherSomeOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Buku\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1000<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pulpen\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">200<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pensil\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span><\/span><\/span> },\r\n  ],\r\n};<\/code><\/pre> <p>\r\n            Lalu kita bikin unit test untuk test case di atas.\r\n          <\/p> <pre><code class=\"javascript hljs\">\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(anothersomeOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1203<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 1203\'<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Kita sudah membuat dua test case dengan masing-masing unit test-nya. Dengan begini setidaknya fungsi <code>orderTotal<\/code> lebih teruji daripada sebelumnya yang hanya diberi satu test case saja.\r\n          <\/p> <p>\r\n            Selengkapnya, kode javascript kita akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Fungsi untuk menghitung total harga<\/span><\/span><\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span><\/span><\/span> prev + curr.price, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> anotherSomeOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Buku\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1000<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pulpen\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">200<\/span><\/span><\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pensil\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case kedua<\/span><\/span><\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(anotherSomeOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1203<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 1203\'<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Untuk eksperimen, kita coba untuk menggagalkan kode unit test yang telah kita buat, menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1808<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Maka hasil yang muncul adalah pesan error <b>Test fail: result must be 808<\/b> yang mana menandakan bahwa terdapat kesalahan pada kode kita. Bisa jadi kesalahannya berada pada kode fungsi yang kita buat, atau bahkan di kode unit test tersebut. Yang pasti dengan adanya error itu kita jadi tahu bahwa kode kita bermasalah dan kita dapat mendeteksi masalah tersebut lebih awal.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/02-1.webp\" alt=\"Pesan error ketika unit test gagal\"> <figcaption>\r\n              Pesan error ketika unit test gagal\r\n            <\/figcaption><\/figure> <h1>Melakukan improvement terhadap fungsi yang di test<\/h1> <p>\r\n            Kita sudah membuat unit test terhadap fungsi <code>orderTotal<\/code>. Bagaimana jika kita ada kebutuhan tambahan di fitur kita sehingga membutuhkan improvement di fungsi tersebut. Katakanlah kita ingin mengikutsertakan jumlah barang dalam perhitungan total harga. Sehingga fungsi <code>orderTotal<\/code> akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span><\/span><\/span> prev + (curr.price * curr.qty), <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Lalu tidak lupa kita juga membuat unit test lagi untuk improvement fungsi <code>orderTotal<\/code> yang baru saja kita buat.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Mangga\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">111<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">4<\/span><\/span><\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Duku\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">222<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Apel\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">333<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2<\/span><\/span><\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Jeruk\'<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">444<\/span><\/span><\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span><\/span><\/span>, },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span><\/span><\/span> (orderTotal(anotherSomeOrderToo) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2220<\/span><\/span><\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 2220\'<\/span><\/span><\/span><\/span><\/span>);<\/code><\/pre> <p>\r\n            Jika kita jalankan kode di atas, maka unit test akan meloloskan test case tersebut. Akan tetapi untuk test case sebelumnya, akan gagal. Hal itu dikarenakan improvement yang ada pada fungsi <code>orderTotal<\/code> tidak mendukung unit test untuk kedua test case yang sebelumnya sudah kita buat. Sebaiknya improvement yang kita buat pada fungsi <code>orderTotal<\/code> juga tetap dapat meloloskan semua unit test yang sudah kita tulis.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/02-2.webp\" alt=\"Pesan error ketika unit test gagal\"><\/figure> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/02-3.webp\" alt=\"Pesan error ketika unit test gagal\"><\/figure> <p>\r\n            Untuk kasus seperti ini, ada dua pendekatan. Pertama, kita bisa mengubah unit test yang sebelumnya sudah kita tulis supaya menyesuaikan logika fungsi <code>orderTotal<\/code> yang baru. Atau kedua, kita bisa menyesuaikan improvement yang kita buat pada fungsi <code>orderTotal<\/code> supaya mendukung unit test yang sudah kita buat sebelumnya. Di sini kita akan ambil opsi kedua karena lebih mudah untuk mengubah satu kode fungsi <code>orderTotal<\/code> daripada harus mengubah dua kode unit test yang gagal tersebut.\r\n          <\/p> <p>\r\n            Maka fungsi <code>orderTotal<\/code> akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span><\/span><\/span> prev + (curr.price * curr.qty || <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span><\/span><\/span>), <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Perubahan kode di atas terlihat bahwa kita mengasumsikan bahwa untuk tiap objek belanja yang tidak memiliki properti <code>qty<\/code>, maka nilai properti <code>qty<\/code> dianggap 1. Dan dengan begitu dapat dilihat bahwa unit test yang kita tulis semuanya lolos.\r\n          <\/p> <h1>Tahap selanjutnya<\/h1> <p>\r\n            Setelah kita memahami proses penulisan unit test, serta memahami bagaimana unit test bekerja, maka selanjutnya kita akan berkenalan dengan test runner. Karena pada kenyataannya, kita tidak menulis unit test seperti yang sudah kita lakukan pada tahap ini. Ketika kita mengembangkan sebuah fitur, kita akan membutuhkan bantuan test runner yang berjalan sebelum kode fitur yang kita tulis dideploy ke production.\r\n          <\/p>`,
  },
  {
    slug: 'test-runners',
    label: 'Test Runners',
    image_thumbnail: '03.webp',
    isUnlock: true,
    isActive: false,
    content: '<h1>Mengapa menggunakan test runners?<\/h1> <p>\r\n            Pada kenyataannya, kita pasti menggunakan test runner. Hal itu karena penggunaan test runner memiliki beberapa manfaat.\r\n          <\/p> <ol><li>Menggunakan test runner membuat kode kita menjadi <b>DRY<\/b> (<em>don\'t repeat yourself<\/em>) yang mana dapat menghapus beberapa duplikasi.<\/li> <li>Hasil test yang dimunculkan jauh lebih rapi jika dibanding dengan unit test yang kita tulis menggunakan native javascript seperti di tahap sebelumnya.<\/li> <li>Test runners sangat lazim digunakan oleh semua developer, apalagi jika kita bekerja di tim engineering yang cukup besar. Sehingga sintaks unit test yang kita tulis akan lebih dibaca oleh developer lain jika kita menggunakan test runner.<\/li> <li>Menggunakan test runner memudahkan kita berintegrasi dengan <em>CI (Continuous Integration) system<\/em>.<\/li> <li>Dan yang paling terpenting adalah kita dapat menjalankan test kita otomatis, jika kita menambahkan plugin tertentu di IDE atau text editor kita (contohnya wallaby.js).<\/li><\/ol> <p>\r\n            Test runner yang kita akan pakai adalah <a href=\"https:\/\/jestjs.io\/\" target=\"_blank\" rel=\"noopener\">jest<\/a>.\r\n          <\/p> <h1>Mengapa jest?<\/h1> <p>\r\n            Ada banyak test runner untuk javascript. Tapi alasan kita menggunakan jest dibandingkan dengan yang lain adalah jest sangat <em>established<\/em>. Jest dipromosikan oleh Facebook sebagai <em>testing tool<\/em> untuk framework react. Jest juga banyak dipakai oleh developer, sehingga jest terbukti ampuh dari segi penggunaan. Oleh karena itu mempelajari Jest bisa menjadi bekal yang sangat baik untuk dapat berkolaborasi dengan developer lain di luar sana.\r\n          <\/p> <p>\r\n            Satu hal yang terbaik lagi adalah Jest sangat siap pakai. Jest sudah memiliki assertion library dan mocking library di dalamnya. Bisa dikatakan Jest adalah testing tool yang sangat lengkap.\r\n          <\/p> <h1>Instalasi jest<\/h1> <p>\r\n            Sebelum melakukan instalasi, pastikan kita sudah menginstal npm dan node pada komputer kita. Untuk cara instalasinya, bisa merujuk ke tautan <a href=\"https:\/\/docs.npmjs.com\/downloading-and-installing-node-js-and-npm\" target=\"_blank\" rel=\"noopener\">ini<\/a>.\r\n          <\/p> <p>\r\n            Jika komputer kita sudah terpasang npm dan node, maka kita cukup menjalankan perintah <code>npm init<\/code> di direktori manapun (Saya membuat direktori bernama test-runners)\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/03-1.webp\" alt=\"Inisialisasi direktori proyek\"> <figcaption>Inisialisasi direktori proyek<\/figcaption><\/figure> <p>\r\n            Setelah selesai, maka di direktori kita akan hanya ada satu file <code>package.json<\/code> yang berisi.\r\n          <\/p> <pre><code class=\"json hljs\">{\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"test-runners\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"1.0.0\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"main\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"index.js\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"scripts\"<\/span><\/span><\/span>: {\r\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"test\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<\/span><\/span><\/span>\r\n  },\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"author\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"ISC\"<\/span><\/span><\/span>\r\n}\r\n<\/code><\/pre> <p>\r\n            Lalu kita akan melakukan instalasi jest dengan perintah <code>npm i --save-dev jest<\/code><\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/03-2.webp\" alt=\"Instalasi jest\"> <figcaption>Instalasi jest<\/figcaption><\/figure> <p>\r\n            Di direktori kita akan muncul folder <code>node_modules<\/code> dan file <code>package-lock.json<\/code>. Selain itu file <code>package.json<\/code> kita juga akan mengalami penambahan jest di bagian <code>devDependencies<\/code>.\r\n          <\/p> <pre><code class=\"json hljs\">{\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"test-runners\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"1.0.0\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"main\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"index.js\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"scripts\"<\/span><\/span><\/span>: {\r\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"test\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"<\/span><\/span><\/span>\r\n  },\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"author\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"ISC\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"devDependencies\"<\/span><\/span><\/span>: {\r\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"jest\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"^26.4.2\"<\/span><\/span><\/span>\r\n  }\r\n}\r\n<\/code><\/pre> <h1>Menulis unit test menggunakan jest<\/h1> <p>\r\n            Selanjutnya kita akan memindahkan fungsi <code>orderTotal<\/code> beserta unit testnya ke dalam direktori kita yang sudah terpasang oleh jest. Untuk menyegarkan ingatan kita, berikut kode yang sudah kita tulis pada tahap sebelumnya.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Fungsi untuk menghitung total harga<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span> prev + (curr.price * (curr.qty || <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span>)), <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSomeOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Buku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1000<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pulpen\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">200<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pensil\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Mangga\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">111<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">4<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Duku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">222<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Apel\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">333<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Jeruk\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">444<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span>, },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case kedua<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(anotherSomeOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1203<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 1203\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case ketiga<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(anotherSomeOrderToo) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2220<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 2220\'<\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Pertama kita akan membuat file <code>order-total.js<\/code> sebagai logika yang akan di uji.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> orderTotal = <span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">order<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span> order.items\r\n  .reduce(<span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">(<\/span><\/span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">prev, curr<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\">) =&gt;<\/span><\/span><\/span> prev + (curr.price * (curr.qty || <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span>)), <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module<\/span><\/span><\/span>.exports = orderTotal;\r\n<\/code><\/pre> <p>Lalu kita membuat file untuk unit test-nya dengan nama <code>order-total.test.js<\/code>.<\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> orderTotal = <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">require<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'.\/order-total\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSameOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Buku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1000<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pulpen\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">200<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pensil\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Mangga\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">111<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">4<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Duku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">222<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Apel\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">333<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Jeruk\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">444<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span>, },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case kedua<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(anotherSameOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1203<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 1203\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case ketiga<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(anotherSomeOrderToo) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2220<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 2220\'<\/span><\/span><\/span>);<\/code><\/pre> <p>Lalu kita ubah pengaturan test pada <code>package.json<\/code> supaya kita dapat menjalankan unit test.<\/p> <pre><code class=\"json hljs\">{\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"test-runners\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"1.0.0\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"main\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"index.js\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"scripts\"<\/span><\/span><\/span>: {\r\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"test\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"jest\"<\/span><\/span><\/span>\r\n  },\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"author\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"ISC\"<\/span><\/span><\/span>,\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"devDependencies\"<\/span><\/span><\/span>: {\r\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">\"jest\"<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"^26.4.2\"<\/span><\/span><\/span>\r\n  }\r\n}\r\n<\/code><\/pre> <p>\r\n            Jika kita menjalankan <code>npm test<\/code> pada terminal, maka akan muncul gambar seperti ini yang menandakan bahwa jest sudah terpasang dengan baik.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/03-3.webp\" alt=\"Hasil dari eksekusi unit test menggunakan jest\"> <figcaption>Hasil dari eksekusi unit test menggunakan jest<\/figcaption><\/figure> <p>\r\n            Kita telah berhasil memindahkan fungsi <code>orderTotal<\/code> ke dalam file tersendiri. Sekarang kita akan menulis unit test dengan aturan yang dimiliki jest. Untuk kita akan mencoba menulis satu persatu untuk tiap test case yang sudah kita tulis.\r\n          <\/p> <p>\r\n            Untuk test case pertama, sebelumnya kita menulis seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if<\/span><\/span><\/span> (orderTotal(someOrder) !== <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span>) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">throw<\/span><\/span><\/span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new<\/span><\/span><\/span> <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">Error<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Test fail: result must be 808\'<\/span><\/span><\/span>);\r\n<\/code><\/pre> <p>\r\n            Jika ditranslasikan ke dalam sintaks jest, maka akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 808\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span> expect(orderTotal(someOrder)).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span>));\r\n<\/code><\/pre> <p>\r\n            Dari kode di atas, dapat dilihat bahwa sintaks jest jauh berbeda dengan unit test yang sebelumnya kita tulis. Sintaks jest memiliki beberapa keyword seperti <code>it<\/code>, <code>expect<\/code>, dan <code>toBe<\/code> yang tidak familiar dengan sintaks javascript. Sederhananya, keyword tersebut berfungsi.\r\n          <\/p> <ul><li><code>it<\/code> berfungsi sebagai test case. Best practice-nya selalu didahului dengan kata <em>should<\/em>.\r\n            <\/li> <li><code>expect<\/code> berfungsi sebagai nilai dari variabel atau fungsi yang mau kita harapkan nilainya.\r\n            <\/li> <li><code>toBe<\/code> berfungsi sebagai nilai harapannya.\r\n            <\/li><\/ul> <p>\r\n            Untuk lebih jelasnya, bisa langsung menuju ke dokumentasi resmi jest di <a href=\"https:\/\/jestjs.io\/docs\/en\/expect#expectvalue\" target=\"_blank\" rel=\"noopener\">sini<\/a>.\r\n          <\/p> <p>Lalu kita akan mengganti semua unit test dengan sintaks jest.<\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> orderTotal = <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">require<\/span><\/span><\/span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'.\/order-total\'<\/span><\/span><\/span>);\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> someOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Tas\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">800<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Sendok\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">8<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSameOrder = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Buku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1000<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pulpen\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">200<\/span><\/span><\/span> },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Pensil\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span><\/span><\/span>\r\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">const<\/span><\/span><\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">items<\/span><\/span><\/span>: [\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Mangga\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">111<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">4<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Duku\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">222<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Apel\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">333<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2<\/span><\/span><\/span>, },\r\n    { <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">name<\/span><\/span><\/span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'Jeruk\'<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">price<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">444<\/span><\/span><\/span>, <span class=\"hljs-attr\"><span class=\"hljs-attr\"><span class=\"hljs-attr\">qty<\/span><\/span><\/span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1<\/span><\/span><\/span>, },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 808\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span> expect(orderTotal(someOrder)).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">808<\/span><\/span><\/span>));\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case kedua<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 1203\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span>\r\n  expect(orderTotal(anotherSameOrder)).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1203<\/span><\/span><\/span>));\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case ketiga<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 2220\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span>\r\n  expect(orderTotal(anotherSomeOrderToo)).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2220<\/span><\/span><\/span>));\r\n<\/code><\/pre> <p>Lalu kita jalankan `npm test` di terminal, maka test case kita akan muncul dan berwarna hijau yang menandakan bahwa fungsi yang kita uji lolos dari pengujian.<\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/03-4.webp\" alt=\"Unit test lolos semua\"> <figcaption>Unit test lolos semua<\/figcaption><\/figure> <h1>Tahap selanjutnya<\/h1> <p>\r\n            Setelah kita berhasil memindahkan unit test yang sebelumnya kita tulis menggunakan sintaks javascript ke jest, kita akan menuju ke teknik pengujian yang juga biasa dipakai. Kita akan mencoba untuk melakukan pengujian terhadap data yang diambil melalui API dengan teknik mocking.\r\n          <\/p>',
  },
  {
    slug: 'mocking-dasar',
    label: 'Mocking Dasar',
    image_thumbnail: '04.webp',
    isUnlock: true,
    isActive: false,
    content: '<h1>Apa itu mock function?<\/h1> <p><em>Mock function<\/em>, atau fungsi mock adalah fungsi palsu (<em>fake function<\/em>) yang digunakan ketika kita akan melakukan pengujian terhadap fungsi atau logika yang berhubungan dengan pemanggilan API.\r\n          <\/p> <p>\r\n            Contoh penggunaannya adalah ketika kita melakukan pembayaran, maka kita akan memanggil API payment. Pemanggilan API tersebut pasti terjadi secara async. Pada fase unit test, kita tidak dianjurkan untuk melakukan pengujian dengan cara langsung menembak ke API payment tersebut. Karena ekspektasinya, unit test akan dilakukan berkali-kali, dan jika di dalam unit test kita ada pemanggilan API, maka API tersebut juga akan dipanggil berkali-kali pula. Hal itu dapat menyebabkan penggunaan yang sia-sia terhadap API tersebut. Oleh karena itu, mock function ini hadir untuk menggantikan proses pemanggilan API. Dengan mock function, kita dapat menulis unit test dengan seolah-olah kita memanggil API payment tersebut.\r\n          <\/p> <p>\r\n            Dari tahap sebelumnya kita sudah memiliki kode <code>order-total.js<\/code>. Kali ini kita akan mencoba untuk melakukan pemanggilan API pada kode tersebut.\r\n          <\/p> <p>\r\n            Untuk endpoint API yang digunakan kita akan menggunakan endpoint yang sudah dimock. Saya menggunakan <a href=\"https:\/\/designer.mocky.io\/\" target=\"_blank\" rel=\"noopener\">Mocky<\/a> untuk membuat mock endpoint-nya.\r\n          <\/p> <p>\r\n            Endpoint yang akan digunakan adalah <code>https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910<\/code> dengan response sebagai berikut.\r\n          <\/p> <pre><code class=\"json hljs\">[\r\n  {\r\n    <span class=\"hljs-attr\">\"location\"<\/span>: \u201Csub\u201D,\r\n    <span class=\"hljs-attr\">\"tax\"<\/span>: <span class=\"hljs-number\">0.1<\/span>\r\n  },\r\n  {\r\n    <span class=\"hljs-attr\">\"location\"<\/span>: \u201Cjkt\u201D,\r\n    <span class=\"hljs-attr\">\"tax\"<\/span>: <span class=\"hljs-number\">0.3<\/span>\r\n  }\r\n]\r\n<\/code><\/pre> <p>\r\n            Dari response tersebut terdapat array yang berisi objek dengan properti <code>location<\/code> dan <code>tax<\/code>. Objek tersebut menjelaskan tentang pajak penambahan nilai yang berlaku di masing-masing kota. Dalam hal ini berarti pajak yang berlaku di Surabaya dan Jakarta. Jika barang yang dibeli berasal dari Surabaya, maka setiap harga barang akan bertambah 10%. Jika barang berasal dari Jakarta, maka akan bertambah 30%.\r\n          <\/p> <p>\r\n            Untuk melakukan pemanggilan API, kita akan menggunakan <a href=\"https:\/\/www.npmjs.com\/package\/node-fetch\" target=\"_blank\" rel=\"noopener\">node-fetch<\/a>.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, fetch<\/span>) =&gt;<\/span> {\r\n  fetch(<span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>);\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve(order.items.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr<\/span>) =&gt;<\/span> prev + (curr.price * (curr.qty || <span class=\"hljs-number\">1<\/span>)), <span class=\"hljs-number\">0<\/span>));\r\n}\r\n\r\n<span class=\"hljs-built_in\">module<\/span>.exports = orderTotal;\r\n<\/code><\/pre> <p>\r\n            Dari perubahan <code>order-test.js<\/code> di atas dapat dilihat bahwa fungsi <code>orderTotal<\/code> memiliki parameter lain selain <code>order<\/code>, yaitu parameter <code>fetch<\/code>. Variabel <code>fetch<\/code> ini memiliki fungsi yang sama dengan <code>node-fetch<\/code> yang tidak kita instal, salah satunya adalah memiliki parameter berupa endpoint yang mau kita panggil.\r\n          <\/p> <p>\r\n            Jika kita menjalankan test <code>npm test<\/code>, maka test kita akan gagal seperti di bawah ini.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/04-1.webp\" alt=\"Unit test gagal\"> <figcaption>Unit test gagal<\/figcaption><\/figure> <p>\r\n            Istilahnya adalah <code>red condition<\/code>, yaitu kondisi ketika unit test kita gagal.\r\n          <\/p> <p>\r\n            Kita akan membuat satu test case baru untuk menguji apakah pemanggilan API yang kita lakukan berhasil atau tidak. Teknis pengujiannya adalah kita akan membuat satu fungsi palsu seolah-olah dia berfungsi sebagai <code>fetch<\/code> yang melakukan pemanggilan API. Seperti ini kode unit test-nya.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">let<\/span> isFakeFetchCalled = <span class=\"hljs-literal\">false<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url<\/span>) =&gt;<\/span> {\r\n    expect(url).toBe(<span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>)\r\n    isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>\r\n  };\r\n  orderTotal(someOrder, fakeFetch).then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> {\r\n    expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>);\r\n  });\r\n});\r\n<\/code><\/pre> <p>\r\n            Ada beberapa hal yang bisa kita bahas dari unit test di atas. Yang pertama adalah adanya variabel <code>fakeFetch<\/code> yang bernilai fungsi dengan parameter string <code>url<\/code>. Di dalam fungsi tersebut terdapat pengujian <code>url<\/code> yang menguji apakah endpoint yang dipanggil sama dengan yang dipanggil di <code>order-test.js<\/code>. Lalu di bawahnya terdapat <code>isFakeFetchCalled<\/code> yang diset true. Variabel <code>isFakeFetchCalled<\/code> inilah yang nantinya akan kita jadikan acuan apakah fungsi <code>fetch<\/code> kita yang ada di <code>order-total.js<\/code> berhasil terpanggil atau tidak.\r\n          <\/p> <p>\r\n            Yang kedua adalah penggunaan keyword <code>then<\/code> ketika kita akan melakukan pengujian hasil dari fungsi <code>orderTotal<\/code> di kode unit test di atas. Alasan kita menggunakan <code>then<\/code> adalah karena fungsi <code>orderTotal<\/code> yang kita ubah di <code>order-total.js<\/code> mengembalikan nilai promise. Sehingga untuk melakukan pengujian, kita perlu menambah keyword <code>then<\/code> yang menandakan bahwa fungsi tersebut berjalan secara asynchronous.\r\n          <\/p> <p>\r\n            Jika kita jalankan test-nya lagi, maka akan seperti ini.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/04-2.webp\" alt=\"Test case pertama berhasil\"> <figcaption>Test case pertama berhasil<\/figcaption><\/figure> <p>\r\n            Test case yang baru kita tambah tadi sudah berada di <em>green condition<\/em>, meskipun test case lainnya masih red. Tugas kita selanjutnya adalah membuat test case lainnya berada di green.\r\n          <\/p> <p>\r\n            Pada tahap ini, kita akan hanya fokus untuk membuat ketiga test case lainnya berada di green. Oleh karena itu, kita tidak akan melakukan banyak perubahan logika di ketiga test case itu. Yang akan kita lakukan adalah membuat satu fungsi kosong dan mengubah pengujian kita agar mendukung balikan promise dengan cara menambahkan keyword <code>then<\/code>.\r\n          <\/p> <p>\r\n            Seperti ini hasil kode dari ketiga test case tersebut.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-comment\">\/\/ Fungsi kosong sebagai dummy function supaya test case tidak red<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> emptyFunction = <span class=\"hljs-function\">() =&gt;<\/span> {};\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case pertama<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 808\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(someOrder, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">808<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case kedua<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 1203\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSameOrder, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">1203<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case ketiga<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 2220\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSomeOrderToo, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">2220<\/span>)));\r\n<\/code><\/pre> <p>\r\n            Ketika test dijalankan, maka semua test case yang sudah kita tulis akan lolos semua (green condition).\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/04-3.webp\" alt=\"Green condition\"> <figcaption>Green condition<\/figcaption><\/figure> <p>\r\n            Untuk merangkum apa yang sudah kita kode, berikut adalah kode <code>order-total.js<\/code> dan <code>order-total.test.js<\/code>.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, fetch<\/span>) =&gt;<\/span> {\r\n  fetch(<span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>);\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve(order.items.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr<\/span>) =&gt;<\/span> prev + (curr.price * (curr.qty || <span class=\"hljs-number\">1<\/span>)), <span class=\"hljs-number\">0<\/span>));\r\n}\r\n\r\n<span class=\"hljs-built_in\">module<\/span>.exports = orderTotal;\r\n<\/code><\/pre> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-built_in\">require<\/span>(<span class=\"hljs-string\">\'.\/order-total\'<\/span>);\r\n\r\n<span class=\"hljs-comment\">\/\/ Mock fungsi<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> emptyFunction = <span class=\"hljs-function\">() =&gt;<\/span> {};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> someOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Tas\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">800<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Sendok\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">8<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSameOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Buku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">1000<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pulpen\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">200<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pensil\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">3<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Mangga\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">111<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">4<\/span>, },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Duku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">222<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">3<\/span>, },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Apel\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">333<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">2<\/span>, },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Jeruk\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">444<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">1<\/span>, },\r\n  ],\r\n};\r\n\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">let<\/span> isFakeFetchCalled = <span class=\"hljs-literal\">false<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url<\/span>) =&gt;<\/span> {\r\n    expect(url).toBe(<span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>)\r\n    isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>\r\n  };\r\n  orderTotal(someOrder, fakeFetch).then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> {\r\n    expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>);\r\n  });\r\n});\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case pertama<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 808\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(someOrder, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">808<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case kedua<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 1203\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSameOrder, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">1203<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case ketiga<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 2220\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSomeOrderToo, emptyFunction)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">2220<\/span>)));\r\n<\/code><\/pre> <h1>Tahap selanjutnya<\/h1> <p>\r\n            Sekarang kita sudah berhasil melakukan mocking terhadap pemanggilan API. Berikutnya kita akan lebih melakukan eksplorasi terkait mocking ini. Kita juga akan mulai melakukan perhitungan total harga berdasarkan response dari API yang kita panggil.\r\n          <\/p>',
  },
  {
    slug: 'mocking-lanjutan',
    label :'Mocking Lanjutan',
    image_thumbnail: '05.webp',
    isUnlock: true,
    isActive: false,
    content: '<h1>\r\nPerbaikan pada fungsi logika<\/h1> <p>\r\n            Pada tahap ini kita akan mencoba untuk memperbaiki fungsi logika yang ada di <code>order-test.js<\/code> Tapi sebelum itu, kita membuat endpoint baru lagi untuk mendukung kasus yang akan kita hadapi ini. Endpoint itu adalah <code>https:\/\/run.mocky.io\/v3\/a6018f2a-049f-4b38-b759-b8148ed441a0<\/code>. Tujuan kita membuat endpoint baru ini adalah untuk menambah kompleksitas dari kode unit test kita. Supaya kita dapat mencakup banyak hal dari yang kita praktekkan sekarang.\r\n          <\/p> <p>\r\n            Endpoint tersebut masih memiliki response yang sama dengan endpoint yang sebelumnya. Hanya saja endpoint baru ini membutuhkan response headers ketika pemanggilan API. Response headers tersebut berupa.\r\n          <\/p> <pre><code class=\"json hljs\">{\r\n  <span class=\"hljs-attr\">\"X-Test-Header\"<\/span>: <span class=\"hljs-string\">\"Halo Dunia\"<\/span>\r\n}\r\n<\/code><\/pre> <p>\r\n            Kita akan mulai melakukan improvement atau perbaikan pada kode fungsi <code>order-total.js<\/code>. Yang akan kita lakukan adalah mengambil data dari <code>location<\/code> dan <code>tax<\/code> dari response. Lalu kita akan melakukan kalkulasi untuk tiap barang berdasarkan lokasi yang sesuai dengan <code>location<\/code> tersebut. Kita akan menghitung harga dasarnya ditambah dengan berapa persen pajak yang diberikan. Misal nilai <code>tax<\/code> nya adalah 0.1, maka pajaknya adalah 10%. Fungsi <code>orderTotal<\/code> akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, header, fetch<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> fetch(endpoint, { <span class=\"hljs-attr\">headers<\/span>: { <span class=\"hljs-string\">\'X-Test-Header\'<\/span>: header } })\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res<\/span> =&gt;<\/span> res.json())\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data<\/span> =&gt;<\/span> order.items.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr<\/span>) =&gt;<\/span>\r\n       prev + ((curr.price + (curr.price * data.find(<span class=\"hljs-function\"><span class=\"hljs-params\">d<\/span> =&gt;<\/span> d.location === curr.location).tax)) * (curr.qty || <span class=\"hljs-number\">1<\/span>)), <span class=\"hljs-number\">0<\/span>))\r\n}\r\n\r\n<span class=\"hljs-built_in\">module<\/span>.exports = orderTotal;\r\n<\/code><\/pre> <p>\r\n            Dari kode di atas dapat dilihat kalau kita butuh properti tambahan <code>location<\/code> di objek yang kita jadikan test case, oleh karena itu kita juga mengubah objek-objek tersebut menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> someOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Tas\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">800<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Sendok\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">8<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSameOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Buku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">1000<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pulpen\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">200<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pensil\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Mangga\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">111<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Duku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">222<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Apel\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">333<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Jeruk\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">444<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n  ],\r\n};\r\n<\/code><\/pre> <p>\r\n  Lalu kita jalankan test nya.<\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/05-1.webp\" alt=\"Unit test gagal\"> <figcaption>\r\n  Unit test gagal<\/figcaption><\/figure> <p>\r\n            Tentu saja akan merah semua, karena kita belum melakukan penyesuaian di unit test kita.\r\n          <\/p> <p>\r\n            Kita akan coba untuk melakukan penyesuaian terhadap test case yang pertama terlebih dahulu. Jika kita perhatikan isi dari fungsi <code>orderTotal<\/code>, terdapat header yang perlu dilewatkan sebelum melakukan pemanggilan API. Lalu juga kita perlu melakukan mock terhadap response dari pemanggilan API tersebut, sesuai dengan yang sudah dijelaskan pada tahap sebelumnya. Maka akan seperti ini penyesuaian kode untuk test case pertama.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">let<\/span> isFakeFetchCalled = <span class=\"hljs-literal\">false<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n\r\n  <span class=\"hljs-keyword\">const<\/span> fakeHeaders = <span class=\"hljs-string\">\'Halo Dunia\'<\/span>;\r\n  <span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, config<\/span>) =&gt;<\/span> {\r\n    expect(config.headers[<span class=\"hljs-string\">\'X-Test-Header\'<\/span>]).toBe(<span class=\"hljs-string\">\'Halo Dunia\'<\/span>);\r\n    expect(url).toBe(endpoint)\r\n    isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>;\r\n    <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve({\r\n      <span class=\"hljs-attr\">json<\/span>: <span class=\"hljs-function\">() =&gt;<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve([\r\n        { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'sub\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.1<\/span> },\r\n        { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.3<\/span> },\r\n      ]),\r\n    });\r\n  }\r\n  <span class=\"hljs-keyword\">return<\/span> orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>));\r\n});\r\n<\/code><\/pre> <p>\r\n            Pada bagian fungsi <code>fakeFetch<\/code> terdapat mock dari proses pemanggilan api yang ada di <code>orderTotal<\/code> pada <code>order-total.js<\/code>. Fungsi <code>fakeFatch<\/code> mengembalikan nilai JSON yang berupa promise. JSON tersebut kita isi dengan nilai dari response API yang tadi kita cek pada tahap sebelumnya.\r\n          <\/p> <p>\r\n            Begitulah salah satu cara untuk melakukan mocking terhadap pemanggilan API. Sekarang kita akan memperbaiki test case lain dan menyesuaikan dengan fungsi yang ada.\r\n          <\/p> <p>\r\n            Karena <code>fakeFetch<\/code> dan <code>fakeHeaders<\/code> akan kita pakai untuk tiap test case, maka kita akan mengeluarkannya dari test case supaya kedua variabel tersebut bersifat global.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-keyword\">let<\/span> isFakeFetchCalled = <span class=\"hljs-literal\">false<\/span>;\r\n\r\n<span class=\"hljs-comment\">\/\/ Mock header<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeHeaders = <span class=\"hljs-string\">\'Halo Dunia\'<\/span>;\r\n\r\n<span class=\"hljs-comment\">\/\/ Mock fungsi fetch()<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, config<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n\r\n  expect(config.headers[<span class=\"hljs-string\">\'X-Test-Header\'<\/span>]).toBe(<span class=\"hljs-string\">\'Halo Dunia\'<\/span>);\r\n  expect(url).toBe(endpoint)\r\n  isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve({\r\n    <span class=\"hljs-attr\">json<\/span>: <span class=\"hljs-function\">() =&gt;<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve([\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'sub\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.1<\/span> },\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.3<\/span> },\r\n    ]),\r\n  });\r\n};\r\n\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">return<\/span> orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>));\r\n});\r\n<\/code><\/pre> <p>\r\n            Lalu kita benahi test case kita yang lain. Dari sini kita akan lakukan tahap demi tahap supaya kita lebih merasakan bagaimana cara memperbaiki unit test ketika fungsi kita mengalami perubahan.\r\n          <\/p> <p>\r\n            Pertama bisa dilakukan adalah ubah parameter dari <code>orderTotal<\/code> di test yang awalnya hanya memiliki objek order dan fungsi mock, sekarang ditambah dengan mock header <code>fakeHeaders<\/code>.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-comment\">\/\/ Test case pertama<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 808\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">808<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case kedua<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 1203\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSameOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">1203<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case ketiga<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 2220\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSomeOrderToo, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">2220<\/span>)));\r\n<\/code><\/pre> <p>\r\n  \r\n            Kita jalankan test-nya.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/05-2.webp\" alt=\"Unit test masih ada yang gagal\"> <figcaption>\r\n  Unit test masih ada yang gagal<\/figcaption><\/figure> <p>\r\n            Meskipun masih red, tetapi format pemanggilan fungsi <code>orderTotal<\/code> kita sudah benar. Maka selanjutnya adalah mengubah nilai yang kita ekspektasikan dari pengujian.\r\n          <\/p> <p>\r\n            Kedua, kita akan melakukan penghitungan manual dari objek test yang kita buat sebelumnya.\r\n          <\/p> <p>\r\n            Jika dihitung manual, maka hasilnya akan seperti tabel di bawah ini.\r\n          <\/p> <table><thead><tr style=\"color: white;\"><td>Objek<\/td> <td>Belanja<\/td> <td>Harga<\/td> <td>Pajak<\/td> <td>Harga setelah pajak<\/td> <td>Qty<\/td> <td>Harga akhir<\/td><\/tr><\/thead> <tbody><tr><td rowspan=\"2\">someOrder<\/td> <td>Tas<\/td> <td>800<\/td> <td>30%<\/td> <td>1040<\/td> <td>1<\/td> <td rowspan=\"2\">1048.8<\/td><\/tr> <tr><td>Sendok<\/td> <td>8<\/td> <td>10%<\/td> <td>8.8<\/td> <td>1<\/td><\/tr> <tr><td rowspan=\"3\">anotherSomeOrder<\/td> <td>Buku<\/td> <td>1000<\/td> <td>10%<\/td> <td>1100<\/td> <td>1<\/td> <td rowspan=\"3\">1323.3<\/td><\/tr> <tr><td>Pulpen<\/td> <td>200<\/td> <td>10%<\/td> <td>220<\/td> <td>1<\/td><\/tr> <tr><td>Pensil<\/td> <td>3<\/td> <td>10%<\/td> <td>3.3<\/td> <td>1<\/td><\/tr> <tr><td rowspan=\"4\">anotherSomeOrderToo<\/td> <td>Mangga<\/td> <td>111<\/td> <td>10%<\/td> <td>122,1<\/td> <td>4<\/td> <td rowspan=\"4\">2664<\/td><\/tr> <tr><td>Duku<\/td> <td>222<\/td> <td>10%<\/td> <td>244,2<\/td> <td>3<\/td><\/tr> <tr><td>Apel<\/td> <td>333<\/td> <td>30%<\/td> <td>432,9<\/td> <td>2<\/td><\/tr> <tr><td>Jeruk<\/td> <td>444<\/td> <td>30%<\/td> <td>577,2<\/td> <td>\r\n      1<\/td><\/tr><\/tbody><\/table> <p>\r\n            Dari perhitungan di atas, kita sudah tahu berapa harga total setelah ditambah pajak. Maka, saatnya kita masukkan ke dalam kode unit test sebagai nilai yang kita ekspektasikan.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span><\/span><\/span>\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case pertama<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 1048.8\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span>\r\n  orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span> expect(result).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1048.8<\/span><\/span><\/span>)));\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case kedua<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 1323.3\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span>\r\n  orderTotal(anotherSomeOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span> expect(result).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1323.3<\/span><\/span><\/span>)));\r\n\r\n<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">\/\/ Test case ketiga<\/span><\/span><\/span>\r\nit(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\'should have result 2664\'<\/span><\/span><\/span>, <span class=\"hljs-function\"><span class=\"hljs-function\"><span class=\"hljs-function\">() =&gt;<\/span><\/span><\/span>\r\n  orderTotal(anotherSomeOrderToo, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span><\/span><\/span><\/span><\/span><span class=\"hljs-function\"><span class=\"hljs-function\"> =&gt;<\/span><\/span><\/span> expect(result).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2664<\/span><\/span><\/span>)));<\/code><\/pre> <p>\r\n        Jika kita jalankan test-nya.<\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/05-2.webp\" alt=\"Unit test lolos semua\"> <figcaption>\r\n        Unit test lolos semua<\/figcaption><\/figure> <p>\r\n            Akhirnya semua test case kita green.\r\n          <\/p> <p>\r\n            Sebagai penutup, berikut adalah kode akhir dari apa yang sudah kita praktikan.\r\n          <\/p> <pre>      <code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, header, fetch<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> fetch(endpoint, { <span class=\"hljs-attr\">headers<\/span>: { <span class=\"hljs-string\">\'X-Test-Header\'<\/span>: header } })\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res<\/span> =&gt;<\/span> res.json())\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data<\/span> =&gt;<\/span> order.items.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr<\/span>) =&gt;<\/span>\r\n       prev + ((curr.price + (curr.price * data.find(<span class=\"hljs-function\"><span class=\"hljs-params\">d<\/span> =&gt;<\/span> d.location === curr.location).tax)) * (curr.qty || <span class=\"hljs-number\">1<\/span>)), <span class=\"hljs-number\">0<\/span>))\r\n}\r\n\r\n<span class=\"hljs-built_in\">module<\/span>.exports = orderTotal;\r\n<\/code><\/pre> <pre>      <code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-built_in\">require<\/span>(<span class=\"hljs-string\">\'.\/order-total\'<\/span>);\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> someOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Tas\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">800<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Sendok\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">8<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSomeOrder = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Buku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">1000<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pulpen\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">200<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Pensil\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-comment\">\/\/ Objek sebagai test case<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> anotherSomeOrderToo = {\r\n  <span class=\"hljs-attr\">items<\/span>: [\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Mangga\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">111<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">4<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Duku\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">222<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">3<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'sub\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Apel\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">333<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">2<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n    { <span class=\"hljs-attr\">name<\/span>: <span class=\"hljs-string\">\'Jeruk\'<\/span>, <span class=\"hljs-attr\">price<\/span>: <span class=\"hljs-number\">444<\/span>, <span class=\"hljs-attr\">qty<\/span>: <span class=\"hljs-number\">1<\/span>, <span class=\"hljs-attr\">location<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span> },\r\n  ],\r\n};\r\n\r\n<span class=\"hljs-keyword\">let<\/span> isFakeFetchCalled = <span class=\"hljs-literal\">false<\/span>;\r\n\r\n<span class=\"hljs-comment\">\/\/ Mock header<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeHeaders = <span class=\"hljs-string\">\'Halo Dunia\'<\/span>;\r\n\r\n<span class=\"hljs-comment\">\/\/ Mock fungsi fetch()<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, config<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n\r\n  expect(config.headers[<span class=\"hljs-string\">\'X-Test-Header\'<\/span>]).toBe(<span class=\"hljs-string\">\'Halo Dunia\'<\/span>);\r\n  expect(url).toBe(endpoint)\r\n  isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve({\r\n    <span class=\"hljs-attr\">json<\/span>: <span class=\"hljs-function\">() =&gt;<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve([\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'sub\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.1<\/span> },\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.3<\/span> },\r\n    ]),\r\n  });\r\n};\r\n\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">return<\/span> orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>));\r\n});\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case pertama<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 1048.8\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">1048.8<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case kedua<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 1323.3\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSomeOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">1323.3<\/span>)));\r\n\r\n<span class=\"hljs-comment\">\/\/ Test case ketiga<\/span>\r\nit(<span class=\"hljs-string\">\'should have result 2664\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span>\r\n  orderTotal(anotherSomeOrderToo, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(result).toBe(<span class=\"hljs-number\">2664<\/span>)));\r\n<\/code><\/pre> <h1>\r\n      Tahap selanjutnya<\/h1> <p>\r\n            Di tahap ini kita sudah belajar untuk bagaimana cara membuat mock function sendiri. Selanjutnya kita akan belajar untuk membuat mock function dari testing library yang sudah kita sebut di awal, yaitu jest.\r\n          <\/p>',
  },
  {
    slug: 'refactor-dan-jest-mocks',
    label: 'Refactor dan Jest Mocks',
    image_thumbnail: '06.webp',
    isUnlock: true,
    isActive: false,
    content: '<h1>Red, green, refactor!<\/h1> <p>\r\n            Sebelumnya kita sudah mengetahui siklus red dan green ketika kita sedang menulis unit test. Sebenarnya ketika kita menulis unit test, kita tidak hanya dihadapkan dengan red cycle atau green cycle saja. Ada satu kondisi yang perlu kita perhatikan juga, yaitu refactor.\r\n          <\/p> <p>\r\n            Anggap saja unit test kita sudah green. Lalu kita ingin menambah logika dari fungsi kita. Maka jika kita belum menyesuaikan unit test kita dengan logika dari fungsi tadi, maka kita akan memasuki kondisi red. Lalu yang kita lakukan supaya kembali green adalah menyesuaikan unit test kita sesuai dengan logika dari fungsi tersebut. Refactor ini bisa kita sisipkan ketika kita ingin menambah logika dari fungsi.\r\n          <\/p> <p>\r\n            Jika kita lihat pada <code>order-test.js<\/code>, kita bisa melakukan refactor untuk fungsi logika tersebut. Kalau saya akan me-refactor kodenya menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> orderTotal = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, header, fetch<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-comment\">\/\/ Fungsi untuk mencari nilai tax yang sesuai<\/span>\r\n  <span class=\"hljs-keyword\">const<\/span> findTax = <span class=\"hljs-function\">(<span class=\"hljs-params\">taxes, currOrder<\/span>) =&gt;<\/span>\r\n    taxes.find(<span class=\"hljs-function\"><span class=\"hljs-params\">d<\/span> =&gt;<\/span> d.location === currOrder.location).tax;\r\n\r\n  <span class=\"hljs-comment\">\/\/ Fungsi untuk menghitung harga<\/span>\r\n  <span class=\"hljs-keyword\">const<\/span> sumOrder = <span class=\"hljs-function\">(<span class=\"hljs-params\">order, taxes<\/span>) =&gt;<\/span>\r\n    order.items.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, curr<\/span>) =&gt;<\/span>\r\n       prev + ((curr.price + (curr.price * findTax(taxes, curr))) * (curr.qty || <span class=\"hljs-number\">1<\/span>)), <span class=\"hljs-number\">0<\/span>)\r\n\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> fetch(endpoint, { <span class=\"hljs-attr\">headers<\/span>: { <span class=\"hljs-string\">\'X-Test-Header\'<\/span>: header } })\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res<\/span> =&gt;<\/span> res.json())\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data<\/span> =&gt;<\/span> sumOrder(order, data))\r\n}\r\n\r\n<span class=\"hljs-built_in\">module<\/span>.exports = orderTotal;\r\n<\/code><\/pre> <p>Jika kita jalankan test-nya, maka akan lolos semua.<\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/06-1.webp\" alt=\"Unit test lolos semua\"> <figcaption>Unit test lolos semua<\/figcaption><\/figure> <p>\r\n            Jika green semua, maka proses refactor kita berhasil dengan baik. Dikatakan \"berhasil dengan baik\" jika kita melakukan refactor tanpa harus mengubah kode di sisi unit test. Karena meskipun struktur kode nya berubah, logika kode tersebut masih sama.\r\n          <\/p> <h1>Jest mock functions<\/h1> <p>\r\n            Selengkapnya, kita bisa baca di <a href=\"https:\/\/jestjs.io\/docs\/en\/mock-functions\" target=\"_blank\" rel=\"noopener\">situs resminya<\/a>.\r\n          <\/p> <p>\r\n            Jika sebelumnya kita memiliki fungsi mock seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeFetch = <span class=\"hljs-function\">(<span class=\"hljs-params\">url, config<\/span>) =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">const<\/span> endpoint = <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>;\r\n\r\n  expect(config.headers[<span class=\"hljs-string\">\'X-Test-Header\'<\/span>]).toBe(<span class=\"hljs-string\">\'Halo Dunia\'<\/span>);\r\n  expect(url).toBe(endpoint)\r\n  isFakeFetchCalled = <span class=\"hljs-literal\">true<\/span>;\r\n  <span class=\"hljs-keyword\">return<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve({\r\n    <span class=\"hljs-attr\">json<\/span>: <span class=\"hljs-function\">() =&gt;<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve([\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'sub\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.1<\/span> },\r\n      { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.3<\/span> },\r\n    ]),\r\n  });\r\n};\r\n<\/code><\/pre> <p>\r\n            Maka kita akan mengubah bagian tersebut menggunakan fungsi mock yang sudah disediakan oleh jest.\r\n          <\/p> <p>\r\n            Kita akan menggunakan <code>jest.fn().mockReturnValue()<\/code> untuk menggantikan fungsi mock yang sebelumnya kita buat. Perubahan kodenya akan menjadi seperti ini.\r\n          <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\n<span class=\"hljs-keyword\">const<\/span> fakeFetch = jest.fn().mockReturnValue(<span class=\"hljs-built_in\">Promise<\/span>.resolve({\r\n  <span class=\"hljs-attr\">json<\/span>: <span class=\"hljs-function\">() =&gt;<\/span> <span class=\"hljs-built_in\">Promise<\/span>.resolve([\r\n    { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'sub\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.1<\/span> },\r\n    { <span class=\"hljs-string\">\'location\'<\/span>: <span class=\"hljs-string\">\'jkt\'<\/span>, <span class=\"hljs-string\">\'tax\'<\/span>: <span class=\"hljs-number\">0.3<\/span> },\r\n  ]),\r\n}));\r\n<\/code><\/pre> <blockquote><p>\r\n            Lalu bagaimana dengan pengecekan endpoint-nya? Kan kita sudah menghapusnya.\r\n          <\/p><\/blockquote> <p>\r\n          Untuk itu kita bisa menggunakan fungsi dari jest <code>toBeCalledWith<\/code> yang kita uji pada test case pertama.\r\n        <\/p> <p>\r\n          Yang sebelumnya seperti ini.\r\n        <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">return<\/span> orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span> expect(isFakeFetchCalled).toBe(<span class=\"hljs-literal\">true<\/span>));\r\n});\r\n<\/code><\/pre> <p>\r\n          Menjadi seperti ini.\r\n        <\/p> <pre><code class=\"javascript hljs\"><span class=\"hljs-comment\">\/\/ order-total.test.js<\/span>\r\nit(<span class=\"hljs-string\">\'should calls API correctly\'<\/span>, <span class=\"hljs-function\">() =&gt;<\/span> {\r\n  <span class=\"hljs-keyword\">return<\/span> orderTotal(someOrder, fakeHeaders, fakeFetch)\r\n    .then(<span class=\"hljs-function\"><span class=\"hljs-params\">result<\/span> =&gt;<\/span>\r\n      expect(fakeFetch).toBeCalledWith(\r\n        <span class=\"hljs-string\">\'https:\/\/run.mocky.io\/v3\/ddbbd081-50e8-4f88-9d2e-a37945d4f910\'<\/span>,\r\n        { <span class=\"hljs-string\">\"headers\"<\/span>: { <span class=\"hljs-string\">\"X-Test-Header\"<\/span>: <span class=\"hljs-string\">\"Halo Dunia\"<\/span> } }\r\n      )\r\n    );\r\n});\r\n<\/code><\/pre> <p>\r\n            Dan jika kita jalankan test-nya.\r\n          <\/p> <figure><img src=\"\/images\/yuk_belajar\/unit_testing_di_js\/06-1.webp\" alt=\"Unit test lolos semua\"> <figcaption>Unit test lolos semua<\/figcaption><\/figure> <p>\r\n            Maka akan green semua tanpa harus menyentuh kode unit test yang lain.\r\n          <\/p> <p>\r\n            Untuk lebih rinci lagi terkait fungsi mock, kita bisa berselancar ke situs resminya untuk mempelajari library jest yang mungkin sesuai dengan kebutuhan kita.\r\n          <\/p>',
  }
];
